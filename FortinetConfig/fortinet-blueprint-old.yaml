tosca_definitions_version: cloudify_dsl_1_2

imports:

  - http://www.getcloudify.org/spec/cloudify/3.4m4/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.2/plugin.yaml
  - types/fortigate-types.yaml

inputs:

  fortigate_user:
    default: admin

  fortigate_password:
    default: ''

  fortinet_image:
    default: '8b8fa98d-19dd-4393-b886-c430b17a7465'
#   default: 'Fortigate_Image'

  flavor:
    default: '8e6069a3-d8c6-4741-8e0d-6373b2ca38cc'
#   default: dc1.1x1.20

  wan_network:
    type: string
    default: privateExternal #Wan

  wan_subnet:
    type: string
    default: private-subnet #WanSubnet

  lan_network:
    type: string
    default: Lan

  lan_subnet:
    type: string
    default: LanSubnet

  management_network_name:
     type: string
     default: cloudify-management-network

  external_network_name:
    type: string
    default: external

  policy_name:
    type: string
    default: 'DemoPolicy'

  policy_action:
    type: string
    default: 'accept'

# Service already exist on Fortigate (http,https,dns)

  policy_service:
    type: string
    default: 'Web Access'

  policy_srcinterface:
    type: string
    default: 'port2'

  policy_dstinterface:
    type: string
    default: 'port3'

###
  service_name:
    type: string
    default: 'TCPportsAllow'

  service_protocol:
    type: string
    default: 'TCP/UDP/SCTP'

  service_portrange:
    type: string
    default: '100-150'


node_templates:

  FortinetHost:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      server:
         image: { get_input: fortinet_image }
         flavor: { get_input: flavor }
         name: Fortigate-Server

    relationships:

      - target: wan_network
        type: cloudify.relationships.connected_to
      - target: lan_network
        type: cloudify.relationships.connected_to
      - target: server_float_ip
        type: cloudify.openstack.server_connected_to_floating_ip


  policy.config:
    type: fortigate.policy.config
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/fortigate.py
          inputs:
            username: { get_input: fortigate_user }
            password: { get_input: fortigate_password }
            policyId: '2'           ## << - this is uniqe id per each policy you creating
            policyName: { get_input: policy_name }
            srcintf: { get_input: policy_srcinterface }
            dstintf: { get_input: policy_dstinterface }
            action:  { get_input: policy_action }
            serviceName: { get_input: service_name }

            invocation:
                function: create_policy

          executor: central_deployment_agent

    relationships:
      - target: service.config
        type: cloudify.relationships.depends_on
      - target: FortinetHost
        type: cloudify.relationships.contained_in

#          implementation: fabric.fabric_plugin.tasks.run_task
#          inputs:
#            tasks_file: scripts/fortigate.py
#            task_name: create_policy
#            task_properties:
#                username: { get_input: fortigate_user }
#                password: { get_input: fortigate_password }
#                policyId: '2'
#                policyName: { get_input: policy_name }
#                srcintf: { get_input: policy_srcinterface }
#                dstintf: { get_input: policy_dstinterface }
#                action:  { get_input: policy_action }
#                serviceName: { get_input: service_name }


## Example how to create service to be used by the policy (the policy node is dependes on this node)

  service.config:
    type: fortigate.service.config
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/fortigate.py
          inputs:
            username: { get_input: fortigate_user }
            password: { get_input: fortigate_password }
            serviceName: { get_input: service_name }
            protocol: { get_input: service_protocol }
            portrange: { get_input: service_portrange }

            invocation:
                function: create_service

          executor: central_deployment_agent

    relationships:
      - target: FortinetHost
        type: cloudify.relationships.contained_in


## Example:
## This should be use only if you have fix ip's set on some interfaces, ref:  connected_to_port

#  fortinet.port.config:
#    type: cloudify.nodes.SoftwareComponent
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        start:
#          implementation: scripts/fortigate.py
#          inputs:
#            username: { get_input: fortigate_user }
#            password: { get_input: fortigate_password }
#            invocation:
#                function: config_ports
#          executor: central_deployment_agent
#    relationships:
#      - target: FortinetHost
#        type: cloudify.relationships.contained_in
#      - target: wan_network
#        type: cloudify.relationships.connected_to
#      - target: lan_network_port
#        type: cloudify.relationships.connected_to_port


  wan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: wan_network }
      use_external_resource : true

  wan_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: wan_subnet }
      use_external_resource : true
#      subnet:
#        ip_version: 4
#        cidr: 172.30.0.0/24
#        gateway_ip: 172.30.0.1
    relationships:
      - target: wan_network
        type: cloudify.relationships.contained_in

  lan_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: lan_network }
      use_external_resource : false

  lan_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: lan_subnet }
      use_external_resource : false
      subnet:
        ip_version: 4
        cidr: 162.10.0.0/24
        gateway_ip: 162.10.0.1
    relationships:
      - target: lan_network
        type: cloudify.relationships.contained_in


# Use only with fixed ip example
################################
#  lan_network_port:
#    type: cloudify.openstack.nodes.Port
#    properties:
#      use_external_resource : false
#      fixed_ip: 162.10.0.250
#    relationships:
#      - type: cloudify.relationships.contained_in
#        target: lan_network
#      - type: cloudify.relationships.depends_on
#        target: lan_network_subnet

  server_float_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }

